//подгружаем драйвер PostgreSQL
const { Pool } = require('pg');
const model = require('../boot/salsafamilia.js')

//подгружаем вспомогательные функции
const functions = require("../public/javascripts/functions.js");
const query = functions.query;
const transformData = functions.transformData;

//создаем пул подключений к базе данных
const pool = new Pool({
    max: 5,
    host: 'ec2-52-30-81-192.eu-west-1.compute.amazonaws.com',
    user: 'nrixcjoqurpngb',
    database: 'd8blcg87f3fr65',
    password: '9cbf6cc54df797570cc01fd3f6c178fbb9d4c9789888aa6267d0bcd41ee0b41f',
    ssl: {
        rejectUnauthorized: false
    },
});

//возврат формы списка клиентов
exports.getClients = async function(request, response) {
    try {
        let clients = await model.client.findAll({
            order: [['Surname', 'ASC'], ['Name', 'ASC']],
        });
        clients = transformData(clients);
        response.render('clients', {
            clients
        });
    } catch(err) {
        console.log(err);
        response.redirect('/');
    };
};

//возврат пустой карты клиента
exports.newClient = function(request, response) {
    let button1 = {
        action : "/clients/create",
        name : "Создать",
    };
    let button2 = {
        action : "/clients",
        name : "Отмена",
    };
    response.render("clientcard", {
        button1,
        button2,
        title: "Новый клиент",
    });
};

//отправка данных с формы создания клиента в БД
exports.createClient = async function (request, response) {
    if(!request.body) return response.sendStatus(400);
    const name = request.body.name;
    const surname = request.body.surname;
    const cellphone = request.body.cellphone;
    const vk = request.body.vk;
    const insta = request.body.insta;
    const info = request.body.info;
    const birthday = request.body.birthday;
    try {
        let client = await model.client.create({Name: name}, {Surname: surname}, {Cellphone: cellphone}, {VK: vk}, {Insta: insta}, {Info: info}, {Birthday: birthday});
        console.log('Client autogenerated id:', client.id);
        response.redirect(`/clients/${client.id}`);
    } catch(err) {
        console.log(err);
        return response.redirect('back');
    };
};

// поиск клиента по фамилии
exports.clientsFilter = async function (request, response) {
    const surname = request.body.filterSurname;
    try {
        let client = await model.client.findAll({
            where: {
                Surname: surname
            }
        });
        clients = transformData(client);
        response.render('clients', {
            clients
        });
    } catch(err) {
        console.log(err);
        response.redirect('/clients');
    };
};

//возврат карточки клиента по ID
exports.getClientcard = async function (request, response) {
    const id = request.params.idClients;
    try {
        let client = await model.client.findAll({
            where: {
                idClients: id
            }
        });
        let passes = await model.pass.findAll({
            where: {
                ID_Clients: id
            }
        });
        client = transformData(client);
        passes = transformData(passes);
        let button1 = {
            action: "/clients/update",
            name: "Редактировать",
        };
        let button2 = {
            action: "/clients/delete",
            name: "Удалить",
        };
        response.render('clientcard', {
            button1,
            button2,
            title: "Карточка клиента",
            showpasses: true,
            client: client[0],
            passes,
        });
    } catch (err) {
        console.log(err);
    };
};

//редактирование карточки клиента
exports.updateClient = async function (request, response) {
    if(!request.body) return response.sendStatus(400);
    const id = request.body.id;
    const name = request.body.name;
    const surname = request.body.surname;
    const cellphone = request.body.cellphone;
    const vk = request.body.vk;
    const insta = request.body.insta;
    const info = request.body.info;
    const birthday = request.body.birthday ? request.body.birthday : null;
    try {
        let client = await model.client.update({
            Name: name,
            Surname: surname,
            Cellphone: cellphone,
            VK: vk,
            Insta: insta,
            Info: info,
            Birthday: birthday,
        },  {
                where: {
                    idClients: id
                }, returning: true
            });
        console.log(client);
        console.log(`Update client ${surname} ${name} sucsessful`);
        response.redirect(`/clients/${id}`);
    } catch (err) {
        console.log(err);
        response.redirect('back');
    };
};

//удаление клиента из БД
exports.deleteClient = function(request, response) {
    if(!request.body) return response.sendStatus(400);
    const id = request.body.id;
    pool.query('DELETE FROM clients WHERE idClients=?', [id], function(err, data) {
        if(err) return console.log(err);
        console.log(`Delete idClients ${id} succesful`);
        response.redirect("/clients");
    });
};